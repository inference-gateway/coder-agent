// Code generated by A2A CLI v0.4.3 at 2025-07-23 22:26:14 UTC. DO NOT EDIT.
// This file was automatically generated from an Agent Definition Language (ADL) file.
// To regenerate this file, run: a2a generate
//
// For more information about A2A CLI, visit: https://github.com/inference-gateway/a2a-cli

package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/inference-gateway/a2a/adk/server"
	"github.com/inference-gateway/a2a/adk/server/config"
	"github.com/sethvargo/go-envconfig"
	"go.uber.org/zap"

	"github.com/inference-gateway/coder-agent/tools"
)

type Config struct {
	A2A config.Config `env:",prefix=A2A_"`
}

var (
	Version          = "0.1.0"
	AgentName        = "coder"
	AgentDescription = "A coder agent for feature development and code reviews"
)

func main() {
	ctx := context.Background()

	// Load configuration from environment first
	var cfg Config
	if err := envconfig.Process(ctx, &cfg); err != nil {
		log.Fatal("failed to load config:", err)
	}

	// Initialize logger based on DEBUG environment variable
	var logger *zap.Logger
	var err error
	if cfg.A2A.Debug {
		logger, err = zap.NewDevelopment()
	} else {
		logger, err = zap.NewProduction()
	}
	if err != nil {
		log.Fatal("failed to initialize logger:", err)
	}
	defer logger.Sync()

	logger.Debug("loaded configuration", zap.Any("config", cfg))

	// Create toolbox
	toolBox := server.NewDefaultToolBox()
	// Add read_file tool
	read_fileTool := tools.NewRead_fileTool()
	toolBox.AddTool(read_fileTool)
	// Add write_file tool
	write_fileTool := tools.NewWrite_fileTool()
	toolBox.AddTool(write_fileTool)
	// Add list_directory tool
	list_directoryTool := tools.NewList_directoryTool()
	toolBox.AddTool(list_directoryTool)
	// Add search_code tool
	search_codeTool := tools.NewSearch_codeTool()
	toolBox.AddTool(search_codeTool)
	// Add execute_command tool
	execute_commandTool := tools.NewExecute_commandTool()
	toolBox.AddTool(execute_commandTool)
	// Add git_operations tool
	git_operationsTool := tools.NewGit_operationsTool()
	toolBox.AddTool(git_operationsTool)

	// Create A2A server with agent
	agent, err := server.NewAgentBuilder(logger).
		WithConfig(&cfg.A2A.AgentConfig).
		WithToolBox(toolBox).
		WithSystemPrompt(`You are an expert coding assistant specialized in software development, code reviews, debugging, and refactoring.
You help developers write clean, efficient, and maintainable code across multiple programming languages.
You can analyze code, suggest improvements, fix bugs, implement features, and provide technical guidance.
`).
		Build()
	if err != nil {
		log.Fatal("failed to create agent:", err)
	}

	a2aServer, err := server.NewA2AServerBuilder(cfg.A2A, logger).
		WithAgent(agent).
		WithAgentCardFromFile("./.well-known/agent.json", map[string]interface{}{
			"name":        AgentName,
			"version":     Version,
			"description": AgentDescription,
			"url":         cfg.A2A.AgentURL,
		}).
		Build()
	if err != nil {
		log.Fatal("failed to create A2A server:", err)
	}

	// Start server
	go func() {
		if err := a2aServer.Start(ctx); err != nil {
			log.Fatal("server failed to start:", err)
		}
	}()

	logger.Info("coder agent running", zap.String("port", cfg.A2A.ServerConfig.Port))

	// Wait for shutdown signal
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	logger.Info("shutting down server...")
	a2aServer.Stop(ctx)
}
